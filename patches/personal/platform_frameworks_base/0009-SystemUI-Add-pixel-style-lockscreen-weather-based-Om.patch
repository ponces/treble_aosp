From 3395f2104ba7557679de523978566dce61310581 Mon Sep 17 00:00:00 2001
From: Pranav Vashi <neobuddy89@gmail.com>
Date: Fri, 28 Apr 2023 11:01:16 +0530
Subject: [PATCH 9/9] SystemUI: Add pixel style lockscreen weather based
 OmniJaws

* Similar to SmartSpace but more consistent with keyguard status area.
* Complete rewrite of omni implementation on Android 11.

Ref:
https://github.com/crdroidandroid/android_frameworks_base/commit/97734230d0c1f92f5bc87ff8a515b198d92cdd15
https://github.com/crdroidandroid/android_frameworks_base/commit/05fae49a27afdc68ff9747cbe03de7da0d26bb52
https://github.com/crdroidandroid/android_frameworks_base/commit/8a923c24fb633b7d9f28e4d78145abc44dbb1350

Change-Id: I138c0dc94f08142f6614659037a501d6ae8909b1
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 core/java/android/provider/Settings.java      |  10 ++
 packages/SystemUI/AndroidManifest.xml         |   3 +
 .../layout/current_weather_view.xml           |  59 +++++++
 .../layout/keyguard_clock_switch.xml          |   6 +
 .../KeyguardClockSwitchController.java        |  47 ++++-
 .../KeyguardStatusViewController.java         |   1 +
 .../systemui/crdroid/CurrentWeatherView.java  | 163 ++++++++++++++++++
 7 files changed, 288 insertions(+), 1 deletion(-)
 create mode 100644 packages/SystemUI/res-keyguard/layout/current_weather_view.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/crdroid/CurrentWeatherView.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index d695c0cb3760..ac1cb32f852e 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -5755,6 +5755,16 @@ public final class Settings {
          * the setting value. See an example above.
          */
 
+        /**
+         * @hide
+         */
+        public static final String LOCKSCREEN_WEATHER_ENABLED = "lockscreen_weather_enabled";
+
+        /**
+         * @hide
+         */
+        public static final String LOCKSCREEN_WEATHER_LOCATION = "lockscreen_weather_location";
+
         /**
          * Keys we no longer back up under the current schema, but want to continue to
          * process when restoring historical backup datasets.
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 829ce87a4e8c..ac04e4e09dd5 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -349,6 +349,9 @@
 
     <uses-permission android:name="android.permission.MONITOR_KEYBOARD_BACKLIGHT" />
 
+    <!-- OmniJaws -->
+    <uses-permission android:name="org.omnirom.omnijaws.READ_WEATHER" />
+
     <protected-broadcast android:name="com.android.settingslib.action.REGISTER_SLICE_RECEIVER" />
     <protected-broadcast android:name="com.android.settingslib.action.UNREGISTER_SLICE_RECEIVER" />
     <protected-broadcast android:name="com.android.settings.flashlight.action.FLASHLIGHT_CHANGED" />
diff --git a/packages/SystemUI/res-keyguard/layout/current_weather_view.xml b/packages/SystemUI/res-keyguard/layout/current_weather_view.xml
new file mode 100644
index 000000000000..502df830f9fd
--- /dev/null
+++ b/packages/SystemUI/res-keyguard/layout/current_weather_view.xml
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2023 crDroid Android Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.android.systemui.crdroid.CurrentWeatherView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_gravity="start"
+    android:gravity="center_vertical"
+    android:clipToPadding="false"
+    android:paddingStart="@dimen/below_clock_padding_start">
+
+    <LinearLayout
+        android:id="@+id/current"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="center_vertical"
+        android:orientation="horizontal" >
+
+        <TextView
+            android:id="@+id/left_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textColor="?attr/wallpaperTextColor"
+            android:ellipsize="end"
+            android:singleLine="true"
+            android:paddingEnd="8dp"
+            style="@style/TextAppearance.Keyguard.Secondary" />
+
+        <ImageView
+            android:id="@+id/current_image"
+            android:layout_width="@dimen/widget_icon_size"
+            android:layout_height="@dimen/widget_icon_size"
+            android:scaleType="centerInside"/>
+
+        <TextView
+            android:id="@+id/right_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textColor="?attr/wallpaperTextColor"
+            android:singleLine="true"
+            android:paddingStart="8dp"
+            style="@style/TextAppearance.Keyguard.Secondary" />
+    </LinearLayout>
+
+</com.android.systemui.crdroid.CurrentWeatherView>
diff --git a/packages/SystemUI/res-keyguard/layout/keyguard_clock_switch.xml b/packages/SystemUI/res-keyguard/layout/keyguard_clock_switch.xml
index fc9c917c152b..5b26e3145e13 100644
--- a/packages/SystemUI/res-keyguard/layout/keyguard_clock_switch.xml
+++ b/packages/SystemUI/res-keyguard/layout/keyguard_clock_switch.xml
@@ -56,6 +56,12 @@
                android:layout_width="match_parent"
                android:layout_height="wrap_content" />
 
+        <include layout="@layout/current_weather_view"
+            android:id="@+id/weather_container"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:visibility="gone" />
+
       <com.android.systemui.statusbar.phone.NotificationIconContainer
           android:id="@+id/left_aligned_notification_icon_container"
           android:layout_width="match_parent"
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardClockSwitchController.java b/packages/SystemUI/src/com/android/keyguard/KeyguardClockSwitchController.java
index 70849b7e2acf..55860a38912e 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardClockSwitchController.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardClockSwitchController.java
@@ -34,8 +34,10 @@ import android.widget.LinearLayout;
 
 import androidx.annotation.NonNull;
 
+import com.android.systemui.Dependency;
 import com.android.systemui.Dumpable;
 import com.android.systemui.R;
+import com.android.systemui.crdroid.CurrentWeatherView;
 import com.android.systemui.dagger.qualifiers.Main;
 import com.android.systemui.dump.DumpManager;
 import com.android.systemui.keyguard.KeyguardUnlockAnimationController;
@@ -52,6 +54,7 @@ import com.android.systemui.statusbar.notification.PropertyAnimator;
 import com.android.systemui.statusbar.notification.stack.AnimationProperties;
 import com.android.systemui.statusbar.phone.NotificationIconAreaController;
 import com.android.systemui.statusbar.phone.NotificationIconContainer;
+import com.android.systemui.tuner.TunerService;
 import com.android.systemui.util.ViewController;
 import com.android.systemui.util.concurrency.DelayableExecutor;
 import com.android.systemui.util.settings.SecureSettings;
@@ -65,9 +68,12 @@ import javax.inject.Inject;
  * Injectable controller for {@link KeyguardClockSwitch}.
  */
 public class KeyguardClockSwitchController extends ViewController<KeyguardClockSwitch>
-        implements Dumpable {
+        implements Dumpable, TunerService.Tunable {
     private static final String TAG = "KeyguardClockSwitchController";
 
+    private static final String LOCKSCREEN_WEATHER_ENABLED =
+            "system:" + Settings.System.LOCKSCREEN_WEATHER_ENABLED;
+
     private final StatusBarStateController mStatusBarStateController;
     private final ClockRegistry mClockRegistry;
     private final KeyguardSliceViewController mKeyguardSliceViewController;
@@ -77,6 +83,7 @@ public class KeyguardClockSwitchController extends ViewController<KeyguardClockS
     private final DumpManager mDumpManager;
     private final ClockEventController mClockEventController;
     private final LogBuffer mLogBuffer;
+    private final TunerService  mTunerService;
 
     private FrameLayout mSmallClockFrame; // top aligned clock
     private FrameLayout mLargeClockFrame; // centered clock
@@ -98,6 +105,9 @@ public class KeyguardClockSwitchController extends ViewController<KeyguardClockS
 
     private final KeyguardUnlockAnimationController mKeyguardUnlockAnimationController;
 
+    private CurrentWeatherView mCurrentWeatherView;
+    private boolean mShowWeather;
+
     private boolean mOnlyClock = false;
     private final DelayableExecutor mUiExecutor;
     private boolean mCanShowDoubleLineClock = true;
@@ -160,6 +170,8 @@ public class KeyguardClockSwitchController extends ViewController<KeyguardClockS
             @Override
             public void onAvailableClocksChanged() { }
         };
+
+        mTunerService = Dependency.get(TunerService.class);
     }
 
     /**
@@ -188,9 +200,12 @@ public class KeyguardClockSwitchController extends ViewController<KeyguardClockS
 
         mSmallClockFrame = mView.findViewById(R.id.lockscreen_clock_view);
         mLargeClockFrame = mView.findViewById(R.id.lockscreen_clock_view_large);
+        mCurrentWeatherView = mView.findViewById(R.id.weather_container);
 
         mDumpManager.unregisterDumpable(getClass().toString()); // unregister previous clocks
         mDumpManager.registerDumpable(getClass().toString(), this);
+
+        mTunerService.addTunable(this, LOCKSCREEN_WEATHER_ENABLED);
     }
 
     @Override
@@ -205,6 +220,8 @@ public class KeyguardClockSwitchController extends ViewController<KeyguardClockS
         mKeyguardDateWeatherViewInvisibility =
                 mView.getResources().getInteger(R.integer.keyguard_date_weather_view_invisibility);
 
+        updateWeatherView();
+
         if (mOnlyClock) {
             View ksv = mView.findViewById(R.id.keyguard_slice_view);
             ksv.setVisibility(View.GONE);
@@ -261,6 +278,7 @@ public class KeyguardClockSwitchController extends ViewController<KeyguardClockS
 
     @Override
     protected void onViewDetached() {
+        mTunerService.removeTunable(this);
         mClockRegistry.unregisterClockChangeListener(mClockChangedListener);
         mClockEventController.unregisterListeners();
         setClock(null);
@@ -272,6 +290,33 @@ public class KeyguardClockSwitchController extends ViewController<KeyguardClockS
                 mKeyguardUnlockAnimationListener);
     }
 
+    @Override
+    public void onTuningChanged(String key, String newValue) {
+        switch (key) {
+            case LOCKSCREEN_WEATHER_ENABLED:
+                mShowWeather =
+                        TunerService.parseIntegerSwitch(newValue, false);
+                updateWeatherView();
+                break;
+            default:
+                break;
+        }
+    }
+
+    public void updateWeatherView() {
+        mUiExecutor.execute(() -> {
+            if (mCurrentWeatherView != null) {
+                if (mShowWeather && !mOnlyClock) {
+                    mCurrentWeatherView.enableUpdates();
+                    mCurrentWeatherView.setVisibility(View.VISIBLE);
+                } else {
+                    mCurrentWeatherView.disableUpdates();
+                    mCurrentWeatherView.setVisibility(View.GONE);
+                }
+            }
+        });
+    }
+
     void onLocaleListChanged() {
         if (mSmartspaceController.isEnabled()) {
             if (mSmartspaceController.isDateWeatherDecoupled()) {
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardStatusViewController.java b/packages/SystemUI/src/com/android/keyguard/KeyguardStatusViewController.java
index 6854c97c3415..5fc5612d2a12 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardStatusViewController.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardStatusViewController.java
@@ -297,6 +297,7 @@ public class KeyguardStatusViewController extends ViewController<KeyguardStatusV
             if (visible) {
                 if (DEBUG) Slog.v(TAG, "refresh statusview visible:true");
                 refreshTime();
+                mKeyguardClockSwitchController.updateWeatherView();
             }
         }
     };
diff --git a/packages/SystemUI/src/com/android/systemui/crdroid/CurrentWeatherView.java b/packages/SystemUI/src/com/android/systemui/crdroid/CurrentWeatherView.java
new file mode 100644
index 000000000000..c567e713bf95
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/crdroid/CurrentWeatherView.java
@@ -0,0 +1,163 @@
+/*
+ * Copyright (C) 2023 crDroid Android Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.crdroid;
+
+import android.content.Context;
+import android.database.ContentObserver;
+import android.graphics.drawable.Drawable;
+import android.os.Handler;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import com.android.internal.util.crdroid.OmniJawsClient;
+import com.android.systemui.R;
+
+public class CurrentWeatherView extends FrameLayout implements OmniJawsClient.OmniJawsObserver {
+
+    static final String TAG = "SystemUI:CurrentWeatherView";
+
+    private ImageView mCurrentImage;
+    private OmniJawsClient mWeatherClient;
+    private OmniJawsClient.WeatherInfo mWeatherInfo;
+    private TextView mLeftText;
+    private TextView mRightText;
+
+    private SettingsObserver mSettingsObserver;
+
+    private boolean mShowWeatherLocation;
+
+    public CurrentWeatherView(Context context) {
+        this(context, null);
+    }
+
+    public CurrentWeatherView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public CurrentWeatherView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        if (mWeatherClient == null) {
+            mWeatherClient = new OmniJawsClient(context);
+        }
+    }
+
+    public void enableUpdates() {
+        if (mWeatherClient != null) {
+            mWeatherClient.addObserver(this);
+            queryAndUpdateWeather();
+        }
+    }
+
+    public void disableUpdates() {
+        if (mWeatherClient != null) {
+            mWeatherClient.removeObserver(this);
+        }
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+        mCurrentImage  = (ImageView) findViewById(R.id.current_image);
+        mLeftText = (TextView) findViewById(R.id.left_text);
+        mRightText = (TextView) findViewById(R.id.right_text);
+        if (mSettingsObserver == null) {
+            mSettingsObserver = new SettingsObserver(new Handler());
+            mSettingsObserver.observe();
+        }
+    }
+
+    private void setErrorView() {
+        mCurrentImage.setImageDrawable(null);
+        mLeftText.setText("");
+        mRightText.setText("");
+    }
+
+    @Override
+    public void weatherError(int errorReason) {
+        // since this is shown in ambient and lock screen
+        // it would look bad to show every error since the
+        // screen-on revovery of the service had no chance
+        // to run fast enough
+        // so only show the disabled state
+        if (errorReason == OmniJawsClient.EXTRA_ERROR_DISABLED) {
+            mWeatherInfo = null;
+            setErrorView();
+        }
+    }
+
+    @Override
+    public void weatherUpdated() {
+        queryAndUpdateWeather();
+    }
+
+    @Override
+    public void updateSettings() {
+        queryAndUpdateWeather();
+    }
+
+    private void queryAndUpdateWeather() {
+        try {
+            if (mWeatherClient == null || !mWeatherClient.isOmniJawsEnabled()) {
+                return;
+            }
+            mWeatherClient.queryWeather();
+            mWeatherInfo = mWeatherClient.getWeatherInfo();
+            if (mWeatherInfo != null) {
+                Drawable d = mWeatherClient.getWeatherConditionImage(mWeatherInfo.conditionCode);
+                mCurrentImage.setImageDrawable(d);
+                mRightText.setText(mWeatherInfo.temp + " " + mWeatherInfo.tempUnits);
+                mLeftText.setText(mWeatherInfo.city);
+                mLeftText.setVisibility(mShowWeatherLocation ? View.VISIBLE : View.GONE);
+            }
+        } catch(Exception e) {
+            // Do nothing
+        }
+    }
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            getContext().getContentResolver().registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.LOCKSCREEN_WEATHER_LOCATION), false, this,
+                    UserHandle.USER_ALL);
+            updateWeatherSettings();
+        }
+
+        void unobserve() {
+            getContext().getContentResolver().unregisterContentObserver(this);
+        }
+
+        void updateWeatherSettings() {
+            mShowWeatherLocation = Settings.System.getIntForUser(getContext().getContentResolver(),
+                    Settings.System.LOCKSCREEN_WEATHER_LOCATION,
+                    0, UserHandle.USER_CURRENT) != 0;
+            mLeftText.setVisibility(mShowWeatherLocation ? View.VISIBLE : View.GONE);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            updateWeatherSettings();
+        }
+    }
+}
-- 
2.34.1

